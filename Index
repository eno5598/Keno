<!doctype html>
<html lang="de">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>KENO â€“ Archiv prÃ¼fen & seltene Kombinationen finden (robuster Datum-Check)</title>
<style>
  body{margin:0;padding:16px;font:16px/1.45 system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial;background:#0b1220;color:#e5e7eb}
  .box{max-width:980px;margin:0 auto;background:#111827;border:1px solid #223046;border-radius:10px;padding:14px}
  h1{margin:0 0 10px}
  label{display:block;margin:8px 0 4px;color:#a1a1aa}
  input[type="file"],input[type="number"],select{width:100%;box-sizing:border-box;padding:10px;border-radius:8px;border:1px solid #263041;background:#0b1220;color:#e5e7eb}
  .row{display:flex;gap:10px;flex-wrap:wrap}
  .row>div{flex:1 1 180px}
  button{padding:10px 14px;border-radius:8px;border:0;cursor:pointer;font-weight:700}
  .primary{background:linear-gradient(135deg,#059669,#22c55e);color:#04110a}
  .secondary{background:#1f2937;color:#e5e7eb;border:1px solid #263041}
  .status{margin-top:8px;font-family:ui-monospace,Consolas,Menlo,monospace;background:#0b1220;border:1px solid #263041;border-radius:8px;padding:8px;white-space:pre-wrap}
  .results{margin-top:10px;font-family:ui-monospace,Consolas,Menlo,monospace;white-space:pre}
  .preview{margin-top:6px;font-family:ui-monospace,Consolas,Menlo,monospace;background:#0b1220;border:1px dashed #334155;border-radius:8px;padding:8px;white-space:pre;max-height:160px;overflow:auto}
</style>
</head>
<body>
  <div class="box">
    <h1>KENO â€“ Archiv prÃ¼fen & Kombinationen finden</h1>

    <label>Archiv-CSV hochladen (eine Spalte mit Zahlen wie â€ž1-4-9-â€¦â€œ, eine mit Datum)</label>
    <input type="file" id="file" accept=".csv,text/csv">

    <label>Spaltenvorschau (erste Zeile)</label>
    <div id="preview" class="preview">(noch keine Datei)</div>

    <div class="row">
      <div>
        <label>Datums-Spalte (Auto oder auswÃ¤hlen)</label>
        <select id="dateCol"></select>
      </div>
    </div>

    <div class="row" style="margin-top:10px">
      <div>
        <label>TippgrÃ¶ÃŸe S</label>
        <input type="number" id="size" value="10" min="1" max="20">
      </div>
      <div>
        <label>Max. erlaubte Ãœberschneidung (0â€“S)</label>
        <input type="number" id="maxOv" value="2" min="0" max="20">
      </div>
      <div>
        <label>Max. Zahl</label>
        <input type="number" id="pop" value="70" min="10" max="200">
      </div>
    </div>

    <div class="row">
      <div>
        <label>Wieviele Ergebnisse</label>
        <input type="number" id="want" value="30" min="1" max="1000">
      </div>
      <div>
        <label>Max. Versuche</label>
        <input type="number" id="tries" value="60000" min="1000" step="1000">
      </div>
      <div>
        <label>Seed</label>
        <input type="number" id="seed" value="1" min="0">
      </div>
    </div>

    <div class="row" style="margin-top:10px">
      <button id="go" class="primary">Generieren</button>
      <button id="save" class="secondary">Als CSV speichern</button>
    </div>

    <div id="status" class="status">Bereit.</div>
    <div id="results" class="results"></div>
  </div>

<script>
(function(){
  const $ = s => document.querySelector(s);
  let g_rows = []; // CSV als 2D-Array

  // --- CSV ---
  function autoDelim(text){
    const cand=[",",";","|","\t"];
    const first=(text.split(/\r?\n/).find(Boolean)||"");
    let best=",",score=-1;
    for(const d of cand){ const s=first.split(d).length; if(s>score){score=s;best=d;} }
    return best;
  }
  function parseCSV(text,d){ return text.split(/\r?\n/).filter(Boolean).map(r=>r.split(d)); }

  // --- Zahlenspalte (mit â€ž1-2-â€¦â€œ) ---
  function detectNumbersColumn(rows){
    const maxCols=Math.max(...rows.map(r=>r.length));
    let best=-1,score=-1;
    for(let c=0;c<maxCols;c++){
      let sc=0;
      for(const r of rows){
        if(c>=r.length) continue;
        const cell=(r[c]||"").trim();
        if(!cell) continue;
        const parts=cell.split("-").map(s=>s.trim());
        if(parts.length>=5 && parts.every(p=>/^\d+$/.test(p))) sc+=parts.length;
      }
      if(sc>score){score=sc;best=c;}
    }
    return best;
  }

  // --- ROBUSTER Datum-Parser (inkl. Excel-Serienzahl, kurze Jahre, Wochentage/Monate) ---
  const deMonths = ["jan","feb","mÃ¤r","mae","mar","apr","mai","jun","jul","aug","sep","okt","nov","dez"];
  function parseDateSmart(s){
    s = String(s||"").trim();
    if (!s) return null;

    // Excel-Serienzahl (ganze Zahl ~ 30000â€“60000)
    if (/^\d{4,6}$/.test(s)) {
      const n = parseInt(s,10);
      if (n > 20000 && n < 80000) {
        // Excel epoch 1899-12-30
        const base = new Date(Date.UTC(1899,11,30));
        const dt = new Date(base.getTime() + n*86400000);
        return new Date(dt.getFullYear(), dt.getMonth(), dt.getDate());
      }
    }

    // Wochentags-/Monatsnamen rauswerfen (z. B. "Mi, 31. Aug 2025")
    s = s.replace(/^[A-Za-zÃ„Ã–ÃœÃ¤Ã¶Ã¼]{2,},?\s*/,""); // fÃ¼hrender Wochentag
    // "31. Aug 2025" -> "31.08.2025"
    const monIdx = deMonths.findIndex(m => s.toLowerCase().includes(m));
    if (monIdx >= 0) {
      s = s.replace(/[A-Za-zÃ„Ã–ÃœÃ¤Ã¶Ã¼\.]{3,}/, String(monIdx+1).padStart(2,"0"));
      s = s.replace(/\s+/g,".");
    }

    let m;
    // DD.MM.YYYY / DD.MM.YY (optional Uhrzeit, optional abschlieÃŸender Punkt)
    if((m = s.match(/^(\d{1,2})\.(\d{1,2})\.(\d{2}|\d{4})\.?(?:[ T](\d{1,2}):(\d{2})(?::(\d{2}))?)?$/))){
      let [ , d,M,y,hh="0",mm="0",ss="0"] = m;
      if (y.length===2) y = (+y >= 70 ? "19"+y : "20"+y);
      return new Date(+y, +M-1, +d, +hh, +mm, +ss);
    }
    // YYYY-MM-DD
    if((m = s.match(/^(\d{4})-(\d{2})-(\d{2})(?:[ T](\d{2}):(\d{2})(?::(\d{2}))?)?$/))){
      const [ , y,M,d,hh="0",mm="0",ss="0"] = m;
      return new Date(+y, +M-1, +d, +hh, +mm, +ss);
    }
    // DD/MM/YYYY
    if((m = s.match(/^(\d{1,2})\/(\d{1,2})\/(\d{4})(?:[ T](\d{1,2}):(\d{2})(?::(\d{2}))?)?$/))){
      const [ , d,M,y,hh="0",mm="0",ss="0"] = m;
      return new Date(+y, +M-1, +d, +hh, +mm, +ss);
    }
    return null;
  }

  function detectDateColumn(rows){
    const maxCols=Math.max(...rows.map(r=>r.length));
    let best=-1,score=-1;
    for(let c=0;c<maxCols;c++){
      let hits=0; for(const r of rows){ if(parseDateSmart(r[c])) hits++; }
      if(hits>score){score=hits;best=c;}
    }
    return score>0?best:-1;
  }

  // --- Bitset & Suche ---
  const toBits = arr => arr.reduce((b,v)=> b | (1n<<BigInt(v-1)), 0n);
  function overlapUpTo(candBits, drawBits, stopAt){
    let x=candBits&drawBits,c=0; while(x){ x&=(x-1n); c++; if(c>stopAt) break; } return c;
  }
  function isValid(cand,drawsBits,maxOv){
    const cb=toBits(cand);
    for(const db of drawsBits){ if(overlapUpTo(cb,db,maxOv)>maxOv) return false; }
    return true;
  }
  function rng(seed){ let t=seed>>>0; return ()=>{ t+=0x6D2B79F5; let r=Math.imul(t^(t>>>15),1|t); r^=r+Math.imul(r^(r>>>7),61|r); return ((r^(r>>>14))>>>0)/4294967296; }; }
  function sampleK(P,S,rand){ const a=Array.from({length:P},(_,i)=>i+1); for(let i=0;i<S;i++){ const j=i+Math.floor(rand()*(P-i)); [a[i],a[j]]=[a[j],a[i]]; } return a.slice(0,S).sort((x,y)=>x-y); }

  function render(results){ $("#results").textContent = results.map((r,i)=>`Kombi ${i+1} â†’ ${r.join(" ")}`).join("\n"); }

  // --- Datei laden: Vorschau + DateCol-Dropdown fÃ¼llen + AktualitÃ¤ts-Check ---
  $("#file").addEventListener("change", async ()=>{
    const f=$("#file").files[0]; if(!f){ return; }
    $("#status").textContent="Lese Dateiâ€¦";
    const text=await new Promise((res,rej)=>{ const fr=new FileReader(); fr.onload=()=>res(String(fr.result)); fr.onerror=()=>rej(fr.error); fr.readAsText(f); });
    const rows=parseCSV(text, autoDelim(text));
    g_rows = rows;

    // Vorschau erste Zeile
    const first = rows[0] || [];
    $("#preview").textContent = first.map((v,i)=>`[${i}] ${v}`).join(" | ");

    // DateCol-Dropdown befÃ¼llen
    const sel = $("#dateCol");
    sel.innerHTML = "";
    const optAuto = document.createElement("option");
    optAuto.value = "auto";
    optAuto.textContent = "Auto erkennen";
    sel.appendChild(optAuto);
    first.forEach((v,i)=>{
      const o=document.createElement("option");
      o.value=String(i);
      o.textContent=`Spalte ${i} â€“ Beispiel: ${v}`;
      sel.appendChild(o);
    });

    // Auto-Detektion vorwÃ¤hlen
    sel.value = "auto";

    // Sofort AktualitÃ¤t melden (ohne Suche)
    const dateCol = sel.value === "auto" ? detectDateColumn(rows) : parseInt(sel.value,10);
    let lastDate = null;
    if(dateCol>=0){
      const times=[];
      for(const r of rows){ const dt=parseDateSmart(r[dateCol]); if(dt) times.push(dt.getTime()); }
      if(times.length) lastDate = new Date(Math.max(...times));
    }

    let msg = "Archiv geladen.";
    if(lastDate){
      const today=new Date();
      const d0=new Date(today.getFullYear(),today.getMonth(),today.getDate());
      const dL=new Date(lastDate.getFullYear(),lastDate.getMonth(),lastDate.getDate());
      const fresh = d0.getTime() > dL.getTime();
      msg += ` Letzte Ziehung: ${lastDate.toLocaleDateString()} ${fresh ? "ðŸ”„ NEUE Ziehung verfÃ¼gbar" : "âœ… aktuell"}`;
    } else {
      msg += " (kein Datum erkannt â€“ wÃ¤hle die Datums-Spalte manuell).";
    }
    $("#status").textContent = msg;
  });

  // --- Generieren ---
  $("#go").addEventListener("click", async ()=>{
    try{
      if (!g_rows.length) { alert("Bitte zuerst CSV laden."); return; }

      // Datumsstatus (nochmal mit aktueller Auswahl)
      const sel = $("#dateCol").value;
      const dateCol = sel==="auto" ? detectDateColumn(g_rows) : parseInt(sel,10);

      let lastDate=null;
      if(dateCol>=0){
        const times=[];
        for(const r of g_rows){ const dt=parseDateSmart(r[dateCol]); if(dt) times.push(dt.getTime()); }
        if(times.length) lastDate=new Date(Math.max(...times));
      }

      // Zahlenspalte finden und Ziehungen extrahieren
      const ncol = detectNumbersColumn(g_rows);
      if (ncol<0) throw new Error("Zahlenspalte nicht erkannt.");
      const lists=[];
      for(const r of g_rows){
        if(ncol>=r.length) continue;
        const cell=(r[ncol]||"").trim(); if(!cell) continue;
        const parts=cell.split("-").map(s=>s.trim()).filter(Boolean);
        if(!parts.every(p=>/^\d+$/.test(p))) continue;
        lists.push(parts.map(Number));
      }
      const freq=new Map(); for(const a of lists) freq.set(a.length,(freq.get(a.length)||0)+1);
      const drawSize=[...freq.entries()].sort((a,b)=>b[1]-a[1])[0][0];
      const draws=lists.filter(a=>a.length===drawSize).map(a=>Array.from(new Set(a)).sort((x,y)=>x-y));

      // Status
      let status = `Archiv: ${draws.length} Ziehungen`;
      if(lastDate){
        const today=new Date();
        const d0=new Date(today.getFullYear(),today.getMonth(),today.getDate());
        const dL=new Date(lastDate.getFullYear(),lastDate.getMonth(),lastDate.getDate());
        const fresh=d0.getTime()>dL.getTime();
        status += ` Â· letzte Ziehung: ${lastDate.toLocaleDateString()} ${fresh ? "ðŸ”„ NEUE Ziehung verfÃ¼gbar" : "âœ… aktuell"}`;
      }
      $("#status").textContent = status;

      // Suche
      const S=+$("#size").value, P=+$("#pop").value, maxOv=+$("#maxOv").value, want=+$("#want").value, tries=+$("#tries").value, seed=+$("#seed").value>>>0;
      const drawsBits=draws.map(toBits), rand=rng(seed), seen=new Set(), out=[];
      for(let t=0;t<tries && out.length<want;t++){
        const cand=sampleK(P,S,rand), key=cand.join("-");
        if(seen.has(key)) continue; seen.add(key);
        if(isValid(cand,drawsBits,maxOv)) out.push(cand);
      }
      $("#results").textContent = out.map((r,i)=>`Kombi ${i+1} â†’ ${r.join(" ")}`).join("\n");
      $("#status").textContent += `\nGefunden: ${out.length}/${want} (S=${S}, max. Ãœberschneidung â‰¤ ${maxOv})`;
    }catch(e){
      $("#status").textContent="Fehler: "+e.message;
      alert(e.message);
    }
  });

  // --- Download ---
  $("#save").addEventListener("click", ()=>{
    const text = $("#results").textContent || "";
    if (!text.trim()) { alert("Keine Ergebnisse."); return; }
    const blob = new Blob([text.replace(/ â†’ /g,",")], {type:"text/plain;charset=utf-8"});
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a"); a.href=url; a.download="kombinationen.txt"; a.click();
    setTimeout(()=>URL.revokeObjectURL(url),500);
  });
})();
</script>
</body>
</html>
